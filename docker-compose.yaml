networks:
  web:
  internal:
  kind:               
    external: true
    name: kind 

services:
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    networks: [internal]
    expose:
      - 9000
      - 9001
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minio123}
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Creates a 'raw' bucket in MinIO once at startup (idempotent)
  minio-mc:
    image: minio/mc:latest
    networks: [internal]
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -lc "
      mc alias set local http://minio:9000 ${MINIO_ROOT_USER:-minio} ${MINIO_ROOT_PASSWORD:-minio123} &&
      mc mb -p local/raw || true &&
      mc ls local
      "
    restart: "no"

  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-analytics}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-analytics_pw}
      POSTGRES_DB: postgres
    networks: [internal, kind]
    expose:
      - 5432
    volumes:
      - pg-data:/var/lib/postgresql/data
      - ./postgres-init/server.crt:/certs/server.crt:ro
      - ./postgres-init/server.key:/certs/server.key:ro    
      - ./postgres-init/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro      
      - ./postgres-init/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres-init/entrypoint.sh:/usr/local/bin/entrypoint.sh:ro
      - ./postgres-init/init.sql:/docker-entrypoint-initdb.d/init.sql
    entrypoint: ["/usr/local/bin/entrypoint.sh"] 
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]      
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-analytics}"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  metabase:
    build: ./metabase
    depends_on:
      postgres:
        condition: service_healthy
    networks: [internal]
    expose:
      - 3000
    volumes:
      - ./duckDB:/var/data:ro,consistent
    environment:
      # Use Postgres for Metabase's own application DB
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: ${MB_APP_DB:-metabase}
      MB_DB_PORT: 5432
      MB_DB_USER: ${POSTGRES_USER:-analytics}
      MB_DB_PASS: ${POSTGRES_PASSWORD:-analytics_pw}
      MB_DB_HOST: postgres
      MB_EMBEDDING_APP_ORIGIN: "*"
      MB_API_KEY: "testkey"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3030/api/health"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 30s

  dbt:
    build: ./dbt
    working_dir: /usr/app
    depends_on:
      minio:
        condition: service_healthy
    networks: [internal]    
    environment:
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minio}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-minio123}
      AWS_REGION: us-east-1
      S3_ENDPOINT: http://minio:9000
      AWS_S3_ALLOW_UNSAFE_RENAME: "true"
    volumes:
      - ./dbt/analyticsOS:/usr/app
      - ./duckDB:/duckdb_output

  caddy:
    image: caddy:2
    networks: [internal, web, kind]
    ports:
      - "80:80"
      - "443:443"
    environment:
      - EMAIL=${EMAIL}
      - DOMAIN=${DOMAIN}
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config

volumes:
  caddy_data:
  caddy_config:
  minio-data:
  pg-data:
